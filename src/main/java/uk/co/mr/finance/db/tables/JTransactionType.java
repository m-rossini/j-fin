/*
 * This file is generated by jOOQ.
 */
package uk.co.mr.finance.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import uk.co.mr.finance.db.JPublic;
import uk.co.mr.finance.db.Keys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JTransactionType extends TableImpl<Record> {

    private static final long serialVersionUID = -859113269;

    /**
     * The reference instance of <code>public.transaction_type</code>
     */
    public static final JTransactionType TRANSACTION_TYPE = new JTransactionType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.transaction_type.transaction_type</code>.
     */
    public final TableField<Record, String> TRANSACTION_TYPE_ = createField(DSL.name("transaction_type"), org.jooq.impl.SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.transaction_type.transaction_description</code>.
     */
    public final TableField<Record, String> TRANSACTION_DESCRIPTION = createField(DSL.name("transaction_description"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * Create a <code>public.transaction_type</code> table reference
     */
    public JTransactionType() {
        this(DSL.name("transaction_type"), null);
    }

    /**
     * Create an aliased <code>public.transaction_type</code> table reference
     */
    public JTransactionType(String alias) {
        this(DSL.name(alias), TRANSACTION_TYPE);
    }

    /**
     * Create an aliased <code>public.transaction_type</code> table reference
     */
    public JTransactionType(Name alias) {
        this(alias, TRANSACTION_TYPE);
    }

    private JTransactionType(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private JTransactionType(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JTransactionType(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, TRANSACTION_TYPE);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.PK_TRANSACTION__TYPE;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.PK_TRANSACTION__TYPE);
    }

    @Override
    public JTransactionType as(String alias) {
        return new JTransactionType(DSL.name(alias), this);
    }

    @Override
    public JTransactionType as(Name alias) {
        return new JTransactionType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JTransactionType rename(String name) {
        return new JTransactionType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JTransactionType rename(Name name) {
        return new JTransactionType(name, null);
    }
}
