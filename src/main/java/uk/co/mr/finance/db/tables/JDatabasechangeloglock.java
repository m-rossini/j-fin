/*
 * This file is generated by jOOQ.
 */
package uk.co.mr.finance.db.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import uk.co.mr.finance.db.JPublic;
import uk.co.mr.finance.db.Keys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JDatabasechangeloglock extends TableImpl<Record> {

    private static final long serialVersionUID = -805647475;

    /**
     * The reference instance of <code>public.databasechangeloglock</code>
     */
    public static final JDatabasechangeloglock DATABASECHANGELOGLOCK = new JDatabasechangeloglock();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.databasechangeloglock.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.databasechangeloglock.locked</code>.
     */
    public final TableField<Record, Boolean> LOCKED = createField(DSL.name("locked"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.databasechangeloglock.lockgranted</code>.
     */
    public final TableField<Record, LocalDateTime> LOCKGRANTED = createField(DSL.name("lockgranted"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.databasechangeloglock.lockedby</code>.
     */
    public final TableField<Record, String> LOCKEDBY = createField(DSL.name("lockedby"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>public.databasechangeloglock</code> table reference
     */
    public JDatabasechangeloglock() {
        this(DSL.name("databasechangeloglock"), null);
    }

    /**
     * Create an aliased <code>public.databasechangeloglock</code> table reference
     */
    public JDatabasechangeloglock(String alias) {
        this(DSL.name(alias), DATABASECHANGELOGLOCK);
    }

    /**
     * Create an aliased <code>public.databasechangeloglock</code> table reference
     */
    public JDatabasechangeloglock(Name alias) {
        this(alias, DATABASECHANGELOGLOCK);
    }

    private JDatabasechangeloglock(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private JDatabasechangeloglock(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JDatabasechangeloglock(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, DATABASECHANGELOGLOCK);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.DATABASECHANGELOGLOCK_PKEY;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.DATABASECHANGELOGLOCK_PKEY);
    }

    @Override
    public JDatabasechangeloglock as(String alias) {
        return new JDatabasechangeloglock(DSL.name(alias), this);
    }

    @Override
    public JDatabasechangeloglock as(Name alias) {
        return new JDatabasechangeloglock(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JDatabasechangeloglock rename(String name) {
        return new JDatabasechangeloglock(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JDatabasechangeloglock rename(Name name) {
        return new JDatabasechangeloglock(name, null);
    }
}
