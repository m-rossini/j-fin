/*
 * This file is generated by jOOQ.
 */
package uk.co.mr.finance.db.tables;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import uk.co.mr.finance.db.Indexes;
import uk.co.mr.finance.db.JPublic;
import uk.co.mr.finance.db.Keys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JStatementData extends TableImpl<Record> {

    private static final long serialVersionUID = 816331594;

    /**
     * The reference instance of <code>public.statement_data</code>
     */
    public static final JStatementData STATEMENT_DATA = new JStatementData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.statement_data.statement_id</code>.
     */
    public final TableField<Record, Integer> STATEMENT_ID = createField(DSL.name("statement_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.statement_data.transaction_order</code>.
     */
    public final TableField<Record, Integer> TRANSACTION_ORDER = createField(DSL.name("transaction_order"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.statement_data.statement_date</code>.
     */
    public final TableField<Record, LocalDate> STATEMENT_DATE = createField(DSL.name("statement_date"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.statement_data.transaction_type</code>.
     */
    public final TableField<Record, String> TRANSACTION_TYPE = createField(DSL.name("transaction_type"), org.jooq.impl.SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.statement_data.sort_code</code>.
     */
    public final TableField<Record, String> SORT_CODE = createField(DSL.name("sort_code"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.statement_data.account_id</code>.
     */
    public final TableField<Record, String> ACCOUNT_ID = createField(DSL.name("account_id"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "");

    /**
     * The column <code>public.statement_data.transaction_description</code>.
     */
    public final TableField<Record, String> TRANSACTION_DESCRIPTION = createField(DSL.name("transaction_description"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.statement_data.transaction_amount</code>.
     */
    public final TableField<Record, BigDecimal> TRANSACTION_AMOUNT = createField(DSL.name("transaction_amount"), org.jooq.impl.SQLDataType.NUMERIC(8, 2), this, "");

    /**
     * The column <code>public.statement_data.total_balance</code>.
     */
    public final TableField<Record, BigDecimal> TOTAL_BALANCE = createField(DSL.name("total_balance"), org.jooq.impl.SQLDataType.NUMERIC(8, 2), this, "");

    /**
     * Create a <code>public.statement_data</code> table reference
     */
    public JStatementData() {
        this(DSL.name("statement_data"), null);
    }

    /**
     * Create an aliased <code>public.statement_data</code> table reference
     */
    public JStatementData(String alias) {
        this(DSL.name(alias), STATEMENT_DATA);
    }

    /**
     * Create an aliased <code>public.statement_data</code> table reference
     */
    public JStatementData(Name alias) {
        this(alias, STATEMENT_DATA);
    }

    private JStatementData(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private JStatementData(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JStatementData(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, STATEMENT_DATA);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_STATEMENT_DATA_UNIQUE_1);
    }

    @Override
    public Identity<Record, Integer> getIdentity() {
        return Keys.IDENTITY_STATEMENT_DATA;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.PK_STATEMENT_DATA_ID;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.PK_STATEMENT_DATA_ID);
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.STATEMENT_DATA__FK_TRANSACTION_TYPE);
    }

    public JTransactionType transactionType() {
        return new JTransactionType(this, Keys.STATEMENT_DATA__FK_TRANSACTION_TYPE);
    }

    @Override
    public JStatementData as(String alias) {
        return new JStatementData(DSL.name(alias), this);
    }

    @Override
    public JStatementData as(Name alias) {
        return new JStatementData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JStatementData rename(String name) {
        return new JStatementData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JStatementData rename(Name name) {
        return new JStatementData(name, null);
    }
}
